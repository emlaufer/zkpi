Major:
1. Proof on stdlib
2. recurse
2. Do the eval

Moderate:
1. Figure out of_heq_true issue
2. Add a section talking about lean issues...
    - e.g. roll your own min function instead of linear order one...
    - Make recursion iterative so we can simplify the annoyingly long
        "linear_order" proofs, etc.
        - GOOD QUESTION: If I completely evaluate the normal linear order min,
        will I get the same thing as the "dumb" min?

Less important:
1. Currently we include the domain in Lam terms so we can do type inferrence in
    the exporter
    - Refactor this so the domain is "extra data" as a term that we can use
        to infer types, but don't actually include in the zk proof.
2. OKAY: lets just ignore singleton elimination .... this is too annoying....
    - Generate the things we want to eval on...
       then make sure they don't use this....
       or I'll be annoyed...
3. Why does evaluating subsingle elim unconditionally cause "eq_of_heq" to
    fail, but is okay when only doing so inside the type
